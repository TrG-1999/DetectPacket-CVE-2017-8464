import pyshark, csv, sys, os, binascii, hashlib
from datetime import datetime

# import subprocess
def get_protocal(pck):
	highProtocal = ""
	try:
		data = pck.frame_info.protocols.split(":")
		protocol = str(data.pop())
		if protocol == 'data':
			highProtocal = 'data'
			protocol = str(data.pop())
	except Exception as e:
		return "",highProtocal
	return  protocol,highProtocal

def get_info(pck):
	try:
		protocol,highProtocal = get_protocal(pck)
		if highProtocal == 'data':
			string = str(pck[highProtocal].data)
		else:
			data = str(pck[protocol]).replace('\n','|')
			data = data.replace('\t',' ')
			data = data.replace('\r','')
			string = data[data.find('|')+1:]
	except Exception as e:
		return " "
	return string

def convertPcapToCsv():
	try:
		capture = pyshark.FileCapture('temp.pcap')
		capture.load_packets()
		fieldnames = ['No', 'Timestamp', 'Source','Destination','Protocal','length','info']

		with open('temp.csv', 'w') as csv_file:
			writer = csv.writer(csv_file, delimiter=',',lineterminator='\n')
			writer.writerow(fieldnames)
			for item in capture:
				if 'IP' in item:
					protocol,highProtocal = get_protocal(item)
					length = str(item.data.len) if highProtocal == 'data' else item.length
					writer.writerow([item.number,item.sniff_timestamp,item.ip.src,item.ip.dst,protocol,length,get_info(item)])
				if 'IPV6' in item:
					protocol,highProtocal = get_protocal(item)
					length = str(item.data.len) if highProtocal == 'data' else item.length
					writer.writerow([item.number,item.sniff_timestamp,item.ipv6.src,item.ipv6.dst,protocol,length,get_info(item)])
		# print('--Convert Successful!')
		time = datetime.now().strftime('%d-%m-%Y-%H_%M_%S')
		#check size file
		if (os.path.getsize("temp.csv")//1000) >= 1:
			os.system('copy temp.csv packet\\'+time+'.csv')
		capture.close()
	except Exception as ecsv:
		capture.close()
		print("Convert unsuccess!! - ",ecsv)

def detectRemoteCode():
	rowsSampleDetect = []
	with open('sample-detect.csv','r') as csvsample:
		detectReader = csv.reader(csvsample)
		detectField = next(detectReader)
		for row in detectReader:
			#col 0 ->md5; col 1 ->ProgramName; col 2->Detail
			rowsSampleDetect.append(row)

	with open('temp.csv', 'r') as csvfile:
		csvreader = csv.reader(csvfile)
		fields = next(csvreader)
		for row in csvreader:
			if row[4]=='tcp' and row[6].find("|")<0 and int(row[5])>1024:
				#col 0 ->No; col 1 ->Timestamp; col 2 ->sr; col 3 ->dst; 
				#col 4 ->Protocal; col 5 ->length; col 6 ->info
				data = binascii.a2b_hex(row[6][:2048])
				if data.startswith(b'MZ'):
					for rowdt in rowsSampleDetect:
						if rowdt[0] == hashlib.md5(data).hexdigest():
							time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
							string = time+" [Warning] sr IP:"+row[2]+" remote code to dst IP:"+row[3] \
							+" [md5:"+rowdt[0]+"|process:"+rowdt[1]+"|Detail:"+rowdt[2]+"]"
							print(string,"\n")
							#Write Log
							with open('log.txt', 'a') as log:
								log.write(string)
								log.write("\n")
#Run continuously
if not os.path.isdir("packet\\"):
	os.system('mkdir packet')
while True:
	try:
		print('-- Restart Capture --')
		captureLive = pyshark.LiveCapture(interface='\\Device\\NPF_{81CB8BAA-B5E1-4CCA-944E-E8304E857315}',output_file='temp.pcap')
		captureLive.sniff(timeout=6) #capture on 6 seconds
		captureLive.close()
	except KeyboardInterrupt as er:
		print('Interrupt By [Ctr + C] -> exit program')
		captureLive.close()
		sys.exit()
		os.system('cls')
	#Run convert file Pcap to CSV
	convertPcapToCsv()
	time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
	#Check Detect attack
	try:
		print(time,' - Check Remote Code Execution Vulnerability')
		detectRemoteCode()
	except Exception as e:
		print('Error: ',e)
